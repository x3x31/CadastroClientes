unit TestuntFuncoes;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, untFuncoes;

type
  // Test methods for class TuntFuncoes

  TestTuntFuncoes = class(TTestCase)
  strict private
    FuntFuncoes: TuntFuncoes;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestValidarCampos;
    procedure TestValidarCPFValido;
    procedure TestValidarCPFInvalido;
    procedure TestValidarCNPJValido;
    procedure TestValidarCNPJInvalido;
  end;

implementation

procedure TestTuntFuncoes.SetUp;
begin
  FuntFuncoes := TuntFuncoes.Create;
end;

procedure TestTuntFuncoes.TearDown;
begin
  FuntFuncoes.Free;
  FuntFuncoes := nil;
end;

procedure TestTuntFuncoes.TestValidarCampos;
var
  ReturnValue: Boolean;
  cpf: string;
  tipo: string;
  ativo: string;
  nome: string;
begin
  cpf := '445.257.320-75';
  tipo := 'F';
  ativo := 'A';
  nome := 'Michel Willian Alves';

  ReturnValue := FuntFuncoes.ValidarCampos(nome, ativo, tipo, cpf);

  CheckEquals(((nome <> '') and (ativo <> '') and (tipo <> '') and (cpf <> '')),ReturnValue);

end;

procedure TestTuntFuncoes.TestValidarCNPJInvalido;
var
  ReturnValue: Boolean;
  cnpj: string;
begin
  cnpj := '54.142.907/0001-96';
  ReturnValue := FuntFuncoes.ValidarCNPJ(cnpj);

  CheckEquals(False,ReturnValue);
end;

procedure TestTuntFuncoes.TestValidarCNPJValido;
var
  ReturnValue: Boolean;
  cnpj: string;
begin
  cnpj := '54.242.907/0001-96';
  ReturnValue := FuntFuncoes.ValidarCNPJ(cnpj);

  CheckEquals(True,ReturnValue);
end;

procedure TestTuntFuncoes.TestValidarCPFInvalido;
var
  ReturnValue: Boolean;
  cpf: string;
begin
  cpf := '389.979.570-53';
  ReturnValue := FuntFuncoes.ValidarCPF(cpf);

  CheckEquals(False,ReturnValue);
end;

procedure TestTuntFuncoes.TestValidarCPFValido;
var
  ReturnValue: Boolean;
  cpf: string;
begin
  cpf := '389.979.670-53';
  ReturnValue := FuntFuncoes.ValidarCPF(cpf);

  CheckEquals(True,ReturnValue);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTuntFuncoes.Suite);
end.

